package org.jwellman.jcx;

import com.jidesoft.swing.FolderChooser;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.SwingUtilities;
import org.apache.commons.lang.SystemUtils;
import org.apache.commons.lang.text.StrBuilder;
import org.jwellman.swing.TextAreaActionAdapter;
import org.jwellman.swing.TextAreaTabKeyAdapter;

/**
 * A simple UI/Panel for the JCXEngine.
 *
 * @author Rick Wellman
 */
public class JCXConsole extends javax.swing.JPanel implements Runnable {

	private static final long serialVersionUID = 1L;

	private final List<String> commands = new ArrayList<>();

    private static final Font FONT = new java.awt.Font("Consolas", 0, 16); // "Monospaced

    /**
     * Creates new form JCXConsole
     */
    public JCXConsole() {
        initComponents();

        folderChooser.setAvailableButtons(
                FolderChooser.BUTTON_DESKTOP
              + FolderChooser.BUTTON_MY_DOCUMENTS
              + FolderChooser.BUTTON_REFRESH
              + FolderChooser.BUTTON_NEW);

        stdout.setFont(FONT);
        stderr.setFont(FONT);
        commandline.setFont(FONT);
        
        new TextAreaTabKeyAdapter(commandline);
        new TextAreaActionAdapter(commandline, cmdExecute);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        commandline = new javax.swing.JTextArea();
        cmdExecute = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stdout = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stderr = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        folderChooser = new com.jidesoft.swing.FolderChooser();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.BorderLayout());

        commandline.setColumns(60);
        commandline.setRows(3);
        commandline.setTabSize(4);
        commandline.setLineWrap(true);
        commandline.setWrapStyleWord(true);
        commandline.setText("dir /o:gn /b");
        jScrollPane3.setViewportView(commandline);

        jPanel6.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        cmdExecute.setText("Execute");
        cmdExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExecuteActionPerformed(evt);
            }
        });
        jPanel6.add(cmdExecute, java.awt.BorderLayout.LINE_END);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jProgressBar1.setBorderPainted(false);
        jProgressBar1.setEnabled(false);
        jProgressBar1.setFocusable(false);
        jProgressBar1.setRequestFocusEnabled(false);
        jPanel7.add(jProgressBar1, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.BorderLayout());

        stdout.setEditable(false);
        stdout.setBackground(new java.awt.Color(0, 0, 0));
        stdout.setColumns(60);
        stdout.setForeground(new java.awt.Color(51, 255, 0));
        stdout.setRows(20);
        stdout.setText("stdout");
        jScrollPane2.setViewportView(stdout);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel5.setLayout(new java.awt.BorderLayout());

        stderr.setEditable(false);
        stderr.setBackground(new java.awt.Color(0, 0, 0));
        stderr.setColumns(60);
        stderr.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        stderr.setForeground(new java.awt.Color(255, 0, 51));
        stderr.setRows(5);
        stderr.setText("stderr");
        jScrollPane1.setViewportView(stderr);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel1);

        jPanel2.setMinimumSize(new java.awt.Dimension(250, 121));
        jPanel2.setLayout(new java.awt.BorderLayout());

        folderChooser.setControlButtonsAreShown(false);
        folderChooser.setNavigationFieldVisible(true);
        folderChooser.setRecentListVisible(false);
        jPanel2.add(folderChooser, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExecuteActionPerformed

    	// Disable widgets FIRST!
        this.folderChooser.setEnabled(false);
        this.commandline.setEnabled(false);
        this.cmdExecute.setEnabled(false);
        
        // Set progress bar to indeterminate mode
        this.jProgressBar1.setIndeterminate(true);

    	// Clear stderr display
        this.stderr.setText("");
        
        // Clear stdout display and init with simulated command line
    	final File s = folderChooser.getSelectedFolder();
        if (s != null) { 
        	try {
                this.stdout.setText(s.getCanonicalFile().toString());
                this.stdout.append("> ");
                this.stdout.append(commandline.getText()); // TODO if I ever implement "command line intelligence" this will have to change
                this.stdout.append("\n\n");
        	} catch (IOException e) {
        		e.printStackTrace();
        	} 
        }
        
        //
        new Thread(this).start();

    }//GEN-LAST:event_cmdExecuteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdExecute;
    private javax.swing.JTextArea commandline;
    private com.jidesoft.swing.FolderChooser folderChooser;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea stderr;
    private javax.swing.JTextArea stdout;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
    	
        commands.clear();

        if (SystemUtils.IS_OS_WINDOWS) {
            commands.add("cmd.exe"); // need /windows/system32/ ?
            commands.add("/C");

            // good reference: https://www.computerhope.com/dirhlp.htm
            // The following command is DOS directory listing, directories first, sort alphabetically
            // dir /o:gn /b			<<< TODO try and recognize dir command and make this the default (without the /b)
        } else { // For now, assume Linux
            commands.add("/bin/bash"); // alias expansion requires export BASH_ENV=~/.bashrc *and* shopt -s expand_aliases
            commands.add("-c");
        }

    	// The following work but were more of a proof of concept;
        // the directory/command is now written directly to the stsdout/textarea.
        // final StrBuilder b = new StrBuilder()
	        // .append(SystemUtils.IS_OS_WINDOWS ? "cd && " : null)
	        // .append(SystemUtils.IS_OS_LINUX ? "pwd; " : null)
	        // .append(commandline.getText());
        commands.add(commandline.getText()); // b.toString()

        // execute the command
        try {
            File s = folderChooser.getSelectedFolder();
            if (s != null) { System.out.println(s.getCanonicalFile());
                final SystemCommandExecutor ce = new SystemCommandExecutor(commands, stdout, stderr, folderChooser.getSelectedFolder());
                ce.executeCommand();
            }
        } catch (IOException ex) {
            Logger.getLogger(JCXConsole.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(JCXConsole.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            SwingUtilities.invokeLater(new Runnable() {
                @Override public void run() {
                    jProgressBar1.setIndeterminate(false);
                    folderChooser.setEnabled(true);
                    commandline.setEnabled(true);
                    cmdExecute.setEnabled(true);
                    
            		commandline.requestFocusInWindow();

                }
            });
        }
    }

}
