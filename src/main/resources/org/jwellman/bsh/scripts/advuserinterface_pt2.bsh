/*
 Some scripting and classes to emulate designs found at:
 https://www.deviantart.com/z-design/art/AdvancedUI-Status-Screen-120947815

 This script is intended to be run AFTER advuserinterface_pt1.bsh
 ...it will replace the center component with an updated graph.
 
Actually, as of early 2021, this still works but is really just the prototype
for FiveBarStatusDemo() which is an improved version of the graph
which also includes pretty awesome animation (if I do say so myself).
 
*/

import java.awt.geom.*;

proxy() {

    Color myblue = new Color(0x004892);
    Color darkblue = new Color(0x003770);
    Color lightblue = new Color(0x69E2FF);
    Color midnightblue = new Color(0x012D5C);
    Color graphlineblue = new Color(0x0075C2);
    Color axisgray = new Color(0xB9D7F1);

    Color ledgreen = new Color(0x12FF00);
    Color ledwarning = new Color(0xFFB901);
    Color capshadow = new Color(255,255,0,64);
    Color capshadowred = new Color(255,0,0,64);

    Color tgray100 = new Color(0,0,0,0);
    Color tgray75 = new Color(0,0,0,255);

  drawMajorAxis(Graphics2D g2, int barsLeftStart, int barsBottom) {
        int axesLeft = barsLeftStart - 26;
        int axesWidth = 21;
        g2.setColor(axisgray);

        // Axes Bottom
        Point axes = new Point(axesLeft, barsBottom-1);
        Point p1 = new Point(axes); p1.translate(axesWidth, 0);
        Line2D line = new Line2D.Double(axes, p1);
        g2.draw(line);
        
        // Axes Top
        Point p2 = new Point(axes); 
            p2.translate(0, -2*100);
            p1.translate(0, -2*100);
        line.setLine(p2, p1);
        g2.draw(line);

        // Axes Left
        line.setLine(axes,p2);
        g2.draw(line);
            p2.translate(1,0);
            axes.translate(1,0);
        line.setLine(axes,p2);
        g2.draw(line);    
  }
  
  drawMinorAxis(Graphics2D g2, int barsLeftStart, int barsBottom) {
        int axesWidth = 6;
        int axesLeft = barsLeftStart - 23;
        int axesBottom = barsBottom - 3;
        int axesTop = axesBottom - (2*99);
        g2.setColor(lightblue);

        Point origin = new Point(axesLeft, barsBottom-3);

        // Horizontal Lines   
        Point p1 = new Point(origin); p1.translate(1,0);
        Point p2 = new Point(p1); p2.translate(axesWidth-2,0);
        Line2D line = new Line2D.Double(p1, p2); int n = 0;
        for (int y=axesBottom; y > axesTop; y -= 2) {
            n++;
            if (n%5 == 0) { p2.translate(4,0); line.setLine(p1,p2); }
                g2.draw(line);
            if (n%5 == 0) p2.translate(-4,0);
                
            p1.translate(0,-2);
            p2.translate(0,-2);
            line.setLine(p1, p2);
        }

        int x = axesLeft + axesWidth + 4 + 2;
        int[] values = {20,30,50,80,130};
        for (int n=0; n<5; n++) {
            int y = barsBottom - values[n] - 20;
            triangleShape = new TriangleShape(
                new Point2D.Double(x, y),
                new Point2D.Double(x+5, y-4), 
                new Point2D.Double(x+5, y+4));
            g2.setColor(n < 4 ? Color.white : Color.red);
            g2.fill(triangleShape);
        }
//        g2.setColor(lightblue);
//        g2.draw(triangleShape);
  }

  paintComponent(Graphics g, JComponent c) {

        // Calculate commonly used values:
        final int width = c.getWidth(), height = c.getHeight();

        final Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        // Calculate commonly used values:
        final int left = 0, right = width-1, top = 0, bottom = height-1;
        final int midx = right/2, midy = bottom/2;

        // old background
        //g2.setPaint(new GradientPaint(0, 50, darkblue, 112, 50, myblue, true));
        g2.setColor(myblue); // myblue is almost the same as: 004E90
        g2.fillRect(0, 0, this.width, this.height);
        
        Rectangle bounds = new Rectangle(0,0,this.width,this.height);

        g2.setColor(graphlineblue);
        Line2D line = new Line2D.Double(0, 0, 0, height);
        // Vertical Lines   
        for (int x=0; x < width; x+=5) {
            line.setLine(x, 0, x, height);
            g2.draw(line);
        }
        // Horizontal Lines   
        for (int y=0; y < height; y+=5) {
            line.setLine(0, y, width, y);
            g2.draw(line);
        }

        // Gradient Highlight/Overlay
        g2.setPaint(new GradientPaint(0, 0, tgray100, width, height, tgray75, false));
        g2.fillRect(0, 0, this.width, this.height);

        // Axes
        int barsLeftStart = 50, barsBottom = bottom-3, barsWidth = 25;
        this.drawMajorAxis(g2, barsLeftStart, barsBottom);
        this.drawMinorAxis(g2, barsLeftStart, barsBottom);
        
        // Bars
        Point cursor = new Point(barsLeftStart, 0);
        int[] values = {20,30,50,80,130};
        for (int n=0; n<5; n++) {

            // Main Bar
            Rectangle bar = new Rectangle(cursor);
            bar.setSize(barsWidth, 20+values[n]);
            bar.translate(0, barsBottom - bar.height);            
            g2.setColor(midnightblue);
            g2.fill(bar);

            // Bar Cap
            Rectangle cap = new Rectangle(bar);
            cap.setSize(barsWidth, 10);
            g2.setColor(n < 4 ? Color.yellow : Color.red);
            g2.fill(cap);            

            // Bar Cap Shadow
            cap.translate(0, 10);
            g2.setColor(n < 4 ? capshadow : capshadowred);
            g2.fill(cap);
        
            cursor.translate(barsWidth, 0);            
        }
        
  }

  return this;
}

p = proxy(); 
demo.c.setPaintProxy(p); 
demo.c.repaint();
