import nl.knaw.dans.common.dbflib.*;

import java.io.File;
import java.util.Iterator;
import java.util.List;
import java.text.Format;
import java.text.SimpleDateFormat;

dbf(String tablename) {
    if (tablename.length() == 0) tablename = "DR.DBF";

    this.destination = 1; // 1 = beanshell, 2 = System.out

    // Just wrap either beanshell print() or System.out.print()
    aprint(String s) {
        if (this.destination == 1) bsh.console.print(s); else System.out.print(s);
    }

    // Just wrap either beanshell println() or System.out.println()
    aprintln(String s) {
        if (this.destination == 1) bsh.console.println(s); else System.out.println(s);
    }

    File dbfFile = new File("C:/dev/ahl/AHLDBFs/" + tablename);
    Table table = new Table(dbfFile);
    table.open(IfNonExistent.ERROR);

    java.util.List fields = table.getFields();

            Format dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            this.aprintln("TABLE PROPERTIES");
            this.aprintln("Name          : " + table.getName());
            this.aprintln("Record Count  : " + table.getRecordCount());
            this.aprintln("Last Modified : " + dateFormat.format(table.getLastModifiedDate()));
            this.aprintln("--------------");
            this.aprintln("" + fields.size() + " FIELDS (i.e. COLUMNS) defined as ...");

            for (Field field: fields) {
                this.aprintln("  Name       : " + field.getName());
                this.aprintln("  Type       : " + field.getType());
                this.aprintln("  Length     : " + field.getLength());
                if (field.getDecimalCount() > 0)
                this.aprintln("  Dec. Count : " + field.getDecimalCount());
            }

        this.aprintln(">----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----C");

        int i = 0; limit = 3000;
        java.util.Iterator it = table.recordIterator();
        while (it.hasNext() && i++ < limit) {
          Record record = it.next();

          //this.aprintln("#" + i + ": field count > " + fields.size() );
          //this.aprint(">");

              StringBuffer buff = new StringBuffer(120).append(">");
              for (Field field : fields) {
                // 1: fieldname(type) value
                //this.aprint(field.getName());
                //this.aprint("(");
                //this.aprint(field.getType().toString());
                //this.aprint(") >.");

                //this.aprint(record.getTypedValue(field.getName()));
                if (field.getType() == Type.DATE)
                    buff.append( record.getRawValue(field.getName()) );
                else
                    buff.append( record.getTypedValue(field.getName()) );

                if (buff.length() > 100) break;
                //this.aprintln(".<");
              }
              buff.append("~");

          this.aprintln(buff.toString());
        } // end while

    table.close();

}

/*     File dbfFile = new File("C:/dev/ahl/AHLDBFs/dr.dbf");
A1C.DBF
ACCOUNT.DBF
ACCTPAID.DBF
ACL.DBF
AHL1.DBF
AHLMENU.DBF
AIA.DBF
AIA2.DBF
ASNDLOCK.DBF
BBCLCD.DBF
BEDSCHED.DBF
BILLCLNT.DBF
BILLCNTL.DBF
BILLCPT.DBF
BILLCRCT.DBF
BILLPAY.DBF
BIO1.DBF
CDCODE.DBF
CHEMSTRP.DBF
CLIENT.DBF
CLINITEK.DBF
CLNTBILL.DBF
CLNTCRDT.DBF
CLNTDOL.DBF
CLNTDTL.DBF
CLNTPRNT.DBF
CLNTRCAP.DBF
CLNTTEMP.DBF
CODELIST.DBF
COSTFILE.DBF
COULTER.DBF
COULTER2.DBF
CPTCODES.DBF
CREDIT.DBF
CUPNRACK.DBF
DR.DBF
EPX.DBF
EPX2.DBF
FAXCOVER.DBF
files.txt
FUTURA.DBF
HELPNMST.DBF
HROUTE.DBF
IMX.DBF
IN.DBF
INSCMPY.DBF
INTRFACE.DBF
KEY.DBF
MEX.DBF
MICRO.DBF
MODEMPHN.DBF
MOVEBILL.DBF
MOVEDTL.DBF
NEWMODEM.DBF
NEWNAMES.DBF
NEWREQ.DBF
NEWTST.DBF
OLY.DBF
OLY2.DBF
PASSCODE.DBF
PATIENT.DBF
PATINFO.DBF
PATINS.DBF
PAYBACK.DBF
PRCEFILE.DBF
PROCESS.DBF
PTCHRG.DBF
Q1.DBF
QUALITY.DBF
QUALNAME.DBF
Result.dbf
RESULT1.DBF
ROUTE.DBF
RPTLOG.DBF
RSLTCODE.DBF
RSLTNAME.DBF
RSLTRANG.DBF
RSLTTEXT.DBF
SEQUENCE.DBF
TDX.DBF
TDX2.DBF
TESTGRP.DBF
TESTLIST.DBF
TESTPRCE.DBF
TESTREQ.DBF
TQ1.DBF
TRAVRATE.DBF
TROUTE.DBF
TSTNAMES.DBF
TT.DBF
WORK.DBF
WORKTEST.DBF

 */
