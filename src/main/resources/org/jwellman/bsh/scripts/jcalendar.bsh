import com.toedter.calendar.*;
import com.toedter.calendar.demo.*;
import com.toedter.components.*;
import javax.swing.plaf.basic.BasicSplitPaneDivider;
import javax.swing.plaf.basic.BasicSplitPaneUI;

import org.jwellman.virtualdesktop.DesktopManager;

// Extend JCalendarDemo to override init() and exclude the call to initializeLookAndFeels()
public class MyJCalendarDemo extends com.toedter.calendar.demo.JCalendarDemo {

    // This is a copy from JCalendarDemo except it does not call initializeLookAndFeels()
    public void init() {
        // Set the JGoodies Plastic 3D look and feel
        print("Bypass initializeLookAndFeels()"); //initializeLookAndFeels();

        // initialize all beans to demo
        beans = new JComponent[6];
        beans[0] = new DateChooserPanel();
        beans[1] = new JCalendar();
        beans[2] = new JDayChooser();
        beans[3] = new JMonthChooser();
        beans[4] = new JYearChooser();
        beans[5] = new JSpinField();

        ((JSpinField) beans[5]).adjustWidthToMaximumValue();
        ((JYearChooser) beans[4]).setMaximum(((JSpinField) beans[5])
                .getMaximum());
        ((JYearChooser) beans[4]).adjustWidthToMaximumValue();

        getContentPane().setLayout(new BorderLayout());
        setJMenuBar(createMenuBar());

        toolBar = createToolBar();
        getContentPane().add(toolBar, BorderLayout.NORTH);

        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        splitPane.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        splitPane.setDividerSize(4);
        splitPane.setDividerLocation(240);

        BasicSplitPaneDivider divider = ((BasicSplitPaneUI) splitPane.getUI())
                .getDivider();

        if (divider != null) {
            divider.setBorder(null);
        }

        propertyPanel = new JPanel();
        componentPanel = new JPanel();

        URL iconURL = beans[0].getClass().getResource(
                "images/" + beans[0].getName() + "Color16.gif");
        ImageIcon icon = new ImageIcon(iconURL);

        propertyTitlePanel = new JTitlePanel("Properties", null, propertyPanel,
                BorderFactory.createEmptyBorder(4, 4, 4, 4));

        componentTitlePanel = new JTitlePanel("Component", icon,
                componentPanel, BorderFactory.createEmptyBorder(4, 4, 0, 4));

        splitPane.setBottomComponent(propertyTitlePanel);
        splitPane.setTopComponent(componentTitlePanel);
        installBean(beans[0]);

        getContentPane().add(splitPane, BorderLayout.CENTER);
    }

}

public class JCalendarVirtDemo extends JPanel {

    public JCalendarVirtDemo() {
        super(new BorderLayout());

        MyJCalendarDemo demo = new MyJCalendarDemo();
        demo.init();
        this.add(demo, BorderLayout.CENTER);
    }

}

virtdemo() {

    this.panel = new JCalendarVirtDemo();    

//  import org.jwellman.virtualdesktop.DesktopManager;
    this.iframe = DesktopManager.get().createVApp(this.panel, "JCalendar Demo");
    
    dispose() {
        this.panel = null;
        this.iframe.dispose();
        // If you implement a finalize() in VirtualAppFrame, you should see it "soon"?
    }

    reinit() {
        this.panel = new JCalendarVirtDemo();    
        this.iframe = DesktopManager.get().createVApp(this.panel, "JCalendar Demo");
    }

    showinfo() {
        layout = (BorderLayout)jcaldemo.panel.getLayout();
        comp = layout.getLayoutComponent(BorderLayout.CENTER);
        jmenu = comp.getJMenuBar();
        print(jmenu.getMenuCount()); // 3
        print(jmenu.getMenu(1).getText()); // Look&Feel
    }
        
    aa() { run() { 
        layout = (BorderLayout)jcaldemo.panel.getLayout();
        comp = layout.getLayoutComponent(BorderLayout.CENTER);
        jmenu = comp.getJMenuBar();
        jmenu.remove(jmenu.getMenu(1));
        jmenu.revalidate();
        jmenu.repaint(); 
      }
      return this;
    } 

    return this;
}

jcaldemo = virtdemo();

/* =====================================
These commands can now be run from the console:

jvd.calendar = DesktopManager.get().createVApp(new org.jwellman.jcalendar.VDayChooser(), "my calendar");
or,
// Use the following two lines when using the demo() method/closure
jvd.calendar = new org.jwellman.jcalendar.VDayChooser();
DesktopManager.get().createVApp(jvd.calendar, "my calendar");

demo() {

    this.red = Color.red;

    this.black = Color.black;

    this.panel = 1;

    this.day = 7;
    this.year = 2020;
    this.month = 6;

    this.color = Color.black;
    
    this.font = new Font("Segoe UI", Font.BOLD, 12);
    
    this.logical = true;
    
    this.option = 5;
    run() {
        switch(option) {
            case 1: setDay(); break;
            case 2: setSundayForeground(); break;
            case 3: setWeekdayForeground(); break;
            case 4: setFont(); break;
            case 5: setWeekOfYearVisible(); break;
            case 6: toggleDecorationBackgroundVisible(); break;
            case 7: setDecorationBackgroundColor(); break;
            case 8: toggleDayBordersVisible(); break;
            case 9: setMonth(); break;
            case 10: setYear(); break;
            default:
              print("Invalid Option Selected");
        }        
    }

    toggleDayBordersVisible() {
        this.panel.setDayBordersVisible(!this.panel.isDayBordersVisible());                             
    }

    setDecorationBackgroundColor() {
        print("setDecorationBackgroundColor to: " + this.color);
        this.panel.setDecorationBackgroundColor(this.color);                     
    }

    toggleDecorationBackgroundVisible() {
        this.panel.setDecorationBackgroundVisible(!this.panel.isDecorationBackgroundVisible());                            
    }

    setWeekOfYearVisible() {
        print("setWeekOfYearVisible to: " + this.logical);
        this.panel.setWeekOfYearVisible(this.logical);                
    }

    setFont() {
        print("Setting font to: " + this.font);
        this.panel.setFont(this.font);        
    }

    setDay() {
        print("Setting day to: " + this.day);
        this.panel.setDay(this.day);
    }

    setMonth() {
        print("Setting month to: " + this.month);
        this.panel.setMonth(this.month);
    }

    setYear() {
        print("Setting year to: " + this.year);
        this.panel.setYear(this.year);
    }

    setSundayForeground() {
        print("Setting sunday foreground to: " + this.color);
        this.panel.setSundayForeground(this.color);
    }
    
    setWeekdayForeground() {
        print("Setting weekday foreground to: " + this.color);
        this.panel.setWeekdayForeground(this.color);
    }
    
    return this;
}

demo = demo();
demo.panel = jvd.calendar;


/*
demo.option = 1; // setDay
demo.day = 7;  
SwingUtilities.invokeLater( demo );

demo.option = 2;
demo.color = demo.black;  
SwingUtilities.invokeLater( demo );

demo.option = 3;
demo.color = demo.black;  
SwingUtilities.invokeLater( demo );

demo.option = 4;
demo.font = demo.font; // new Font("Segoe UI", Font.BOLD, 12);
SwingUtilities.invokeLater( demo );

demo.option = 5;
demo.logical = true;  
SwingUtilities.invokeLater( demo );

*/

// ===================================
/* This is an example of how to add a property change listener */
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

demo.listener = new PropertyChangeListener() {
     propertyChange(PropertyChangeEvent e) {
        String propertyName = e.getPropertyName();
        if ("day".equals(propertyName)) {
            print("day todo: " + e.getNewValue());
            print(jvd.calendar.month);
            print(jvd.calendar.year);            
        } else {
            print("unhandled property: " + propertyName);
        }
    }
};

jvd.calendar.alwaysFireDayProperty = true;
jvd.calendar.addPropertyChangeListener(demo.listener);


// ====================================

jcaldemo = virtdemo();
layout = (BorderLayout)jcaldemo.panel.getLayout();
comp = layout.getLayoutComponent(BorderLayout.CENTER);
jmenu = comp.getJMenuBar();
print(jmenu.getMenuCount()); // 3
print(jmenu.getMenu(1).getText()); // Look&Feel

aa() { run() { 
    jmenu.remove(jmenu.getMenu(1));
    jmenu.revalidate();
    jmenu.repaint(); 
  } 
return this; }

// The following are equivalent (as long as you don't change their definition, obviously)...
SwingUtilities.invokeLater( aa() );
SwingUtilities.invokeLater( jcaldemo.aa() );
*/
